package utilities;
import java.math.BigDecimal;

/**

*
由於Java的簡單類型不能夠精確的對浮點數進行運算，這個工具類提供精

* 確的浮點數運算，包括加減乘除和四舍五入。

*/

public class Arith
{

	//默認除法運算精度
	private static final int DEF_DIV_SCALE = 10;

	//這個類不能實例化
	private Arith(){}



	/**
	* 提供精確的加法運算。
	* @param v1 被加數
	*
	@param v2 加數
	* @return 兩個參數的和
	*/
	
	public static double add(double v1,double v2)
	{
		BigDecimal b1 = new
		BigDecimal(Double.toString(v1));
		
		BigDecimal b2 = new
		BigDecimal(Double.toString(v2));
		
		return b1.add(b2).doubleValue();
	}
	
	/**
	* 提供精確的減法運算。
	* @param v1 被減數
	*
	@param v2 減數
	* @return 兩個參數的差
	*/
	
	public static double sub(double v1,double v2)
	{
		BigDecimal b1 = new
		BigDecimal(Double.toString(v1));
		
		BigDecimal b2 = new
		BigDecimal(Double.toString(v2));
		
		return b1.subtract(b2).doubleValue();
	}
	
	/**
	* 提供精確的乘法運算。
	* @param v1 被乘數
	*
	@param v2 乘數
	* @return 兩個參數的積
	*/
	
	public static double mul(double v1,double v2) 
	{
		BigDecimal b1 = new
		BigDecimal(Double.toString(v1));
		
		BigDecimal b2 = new
		BigDecimal(Double.toString(v2));
		
		return b1.multiply(b2).doubleValue();
	}
	
	
	
	/**
	* 提供（相對）精確的除法運算，當發生除不盡的情況時，精確到
	*
	小數點以后10位，以后的數字四舍五入。
	* @param v1 被除數
	* @param v2 除數
	*
	@return 兩個參數的商
	*/
	
	public static double div(double v1,double v2)
	{
		return div(v1,v2,DEF_DIV_SCALE);
	}
	
	
	
	/**
	*
	提供（相對）精確的除法運算。當發生除不盡的情況時，由scale參數指
	* 定精度，以后的數字四舍五入。
	* @param v1
	被除數
	* @param v2 除數
	* @param scale 表示表示需要精確到小數點以后幾位。
	*
	@return 兩個參數的商
	*/
	
	public static double div(double v1,double v2,int scale)
	{
		if(scale<0)
		{
			throw new IllegalArgumentException("The scale must be a positive integer or	zero");
		}
		
		BigDecimal b1 = new BigDecimal(Double.toString(v1));
		BigDecimal b2 = new BigDecimal(Double.toString(v2));
		
		return b1.divide(b2,scale,BigDecimal.ROUND_HALF_UP).doubleValue();
	}
	
	/**
	*
	兩數相除取餘數
	* @param v1 被除數
	* @param v2 除數
	* @return 餘數 
	*/
	
	public static double mod(double v1,double v2)
	{
		BigDecimal b1 = new BigDecimal(Double.toString(v1));
		BigDecimal b2 = new BigDecimal(Double.toString(v2));
		
		BigDecimal[] x = b1.divideAndRemainder(b2);
		return x[1].doubleValue();
	}
	
	
	
	/**
	* 提供精確的小數位四舍五入處理。
	* @param v 需要四舍五入的數字
	* @param scale 小數點后保留幾位
	* @return 四舍五入后的結果
	*/
	
	public static double round(double v,int scale)
	{
	
		if(scale<0)
		{
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		
		BigDecimal b = new BigDecimal(Double.toString(v));
		BigDecimal one = new BigDecimal("1");
		
		return b.divide(one,scale,BigDecimal.ROUND_HALF_UP).doubleValue();
	
	}
	
	/**
	* 提供精確的小數位無條件捨去處理。
	* @param v 需要無條件捨去的數字
	* @param scale 小數點后保留幾位
	* @return 無條件捨去的結果
	*/
	
	public static double rounddown(double v,int scale)
	{
	
		if(scale<0)
		{
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		
		BigDecimal b = new BigDecimal(Double.toString(v));
		BigDecimal one = new BigDecimal("1");
		
		return b.divide(one,scale,BigDecimal.ROUND_DOWN).doubleValue();
	
	}
	
	/**
	* 提供精確的小數位無條件進位處理。
	* @param v 需要無條件進位的數字
	* @param scale 小數點后保留幾位
	* @return 無條件進位的結果
	*/
	
	public static double roundup(double v,int scale)
	{
	
		if(scale<0)
		{
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		
		BigDecimal b = new BigDecimal(Double.toString(v));
		BigDecimal one = new BigDecimal("1");
		
		return b.divide(one,scale,BigDecimal.ROUND_UP).doubleValue();
	
	}

}